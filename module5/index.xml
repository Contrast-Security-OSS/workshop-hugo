<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module5s on Constrast Security User Workshop</title>
    <link>https://contrast-security-oss.github.io/workshop-hugo/module5/</link>
    <description>Recent content in Module5s on Constrast Security User Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://contrast-security-oss.github.io/workshop-hugo/module5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Contrast Security</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/1-about-contrast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/1-about-contrast/</guid>
      <description>About Contrast Security Contrast Security is an automated security testing solution that infuses software with vulnerability assessment capabilities so that security flaws are automatically identified. Contrast Security utilizes dynamic binary instrumentation to identify vulnerabilities in web applications and APIs. Organizations can use Contrast Assess to secure their applications without changing the application software stack or how they build, test, or deploy code. The result is accurate, continuous vulnerability assessment that integrates seamlessly with existing software development and security processes, scales across the software development lifecycle and the entire application portfolio, and easily outpaces traditional solutions.</description>
    </item>
    
    <item>
      <title>Setup and Prerequisites</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/3-prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/3-prerequisites/</guid>
      <description>Setup and Prerequisites This workshop has a few prerequisites and infrastructure requirements.
When Contrast Security is hosting the workshop, most requirements will be setup for you. You may skip these instructions as directed by your instructor.
 Logging on to your workshop workstation In Contrast-guided workshops, your instructor will provide you with a cloud-based workstation configured with tools and scripts.
Your Contrast Security instructor or counterpart will supply you with the network address and credentials to log on.</description>
    </item>
    
    <item>
      <title>Module 1 - Running with Contrast Security</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/1-10-deploying-the-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/1-10-deploying-the-application/</guid>
      <description>Deploying your application This workshop is designed to have you deploy an application so you can see its data added as part of an onboarding lifecycle.
Your instructor already deployed applications configured with your TeamServer credentials. You will receive the connection details for your applications as a URLs for each vulnerable application.
 What happens when you deploy an application? When you deploy your instrumented application, a few things happen:</description>
    </item>
    
    <item>
      <title>Module 5 - Running with Contrast Security</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/10-deploying-the-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/10-deploying-the-application/</guid>
      <description>Deploying your application This workshop is designed to have you deploy an application so you can see its data added as part of an onboarding lifecycle.
We&amp;rsquo;ll start with the deployment of the docker container that contains already instrumented code. We have already configured your container with a Contrast Security agent plus details to point to the right TeamServer. Your task is to start this container with the running application and observe how it will automatically register with the server and start generating results.</description>
    </item>
    
    <item>
      <title>Module List</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/10-module-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/10-module-list/</guid>
      <description> Module List You can jump to different modules from here.
 Module 1: First Time Contrast Users Module 2: Instrumenting a Container Module 3: Building a DevOps Pipeline with Contrast Module 4: Instrumenting a Java application Conclusion   </description>
    </item>
    
    <item>
      <title>Introduction to the Contrast Security User Interface</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/11-introduction-to-the-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/11-introduction-to-the-ui/</guid>
      <description>Introduction to TeamServer There are several options to observe information about vulnerabilities in Contrast Security:
 The browser User Interface (UI) Programmatic/Command-Line (CLI) API access Via various integrations (Jira, Slack, IDEs, etc.)  In this workshop, we&amp;rsquo;ll focus on the UI and CLI options.
 The dashboard is a landing page for all Contrast Security users - developers, operations, security, and administrators. The different dashboard pages provide a
 Log on to TeamServer Start by logging onto the Contrast Security UI at https://eval.</description>
    </item>
    
    <item>
      <title>Module 2 - Instrumenting a Container</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/11-building-a-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/11-building-a-container/</guid>
      <description>Building a container Modern applications are often deployed within containers so during this module we will learn how to build a container image which includes the Contrast Security agent.
We will need to download and enable the agent within our container image, in the next part we&amp;rsquo;ll cover how we run the container.
 The Contrast agent can be downloaded from multiple sources including:
 Contrast TeamServer UI Contrast TeamServer API Package managers including Maven, Nuget, NPM, PyPi and Rubygems.</description>
    </item>
    
    <item>
      <title>Introduction to the Contrast Security User Interface</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/12-exploiting-software-sql-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/12-exploiting-software-sql-injection/</guid>
      <description>SQL Injection Exploits In this section, we&amp;rsquo;ll exploit the vulnerable application with a common tactic known as SQL injection.
SQL injection is a vulnerability that allows an attacker to insert extra commands into a text field. This usually happens because the application does not have sufficient guards in the processing of that text field. We&amp;rsquo;ll look at an example in this section and show the results in TeamServer.
 A sequence showing a SQL Injection Walk the user through the process of entering the text of our SQL injection demonstration.</description>
    </item>
    
    <item>
      <title>Module 2 - Instrumenting a Container</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/12-running-the-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/12-running-the-container/</guid>
      <description>Running the container In this part, we&amp;rsquo;ll configure and run the container with the Contrast agent enabled.
There are a number of ways to configure the Contrast Java agent including system properties, a YAML configuration file or environment variables. The method you choose may vary depend upon your environment and how you currently build your infrastructure so we will introduce the available options here.
 Given that an agent can be configured through multiple methods it is important to understand that there is a an order of precedence applied:</description>
    </item>
    
    <item>
      <title>Introduction to the Contrast Security User Interface</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/13-contrast-security-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/13-contrast-security-cli/</guid>
      <description>But wait, there&amp;rsquo;s more. Show the CLI. In this section, we&amp;rsquo;ll show you how to programmatically access the same information via API. At Contrast Security, we recognize the value an API-enabled solution provides to DevOps teams to access data and information. In the next few examples, we&amp;rsquo;ll show you some of the same information from the UI in CLI form.
You can also reference the Contrast Security [API documentation] (https://api.</description>
    </item>
    
    <item>
      <title>Module 2 - Instrumenting a Container</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/2-13-testing-instrumented-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/2-13-testing-instrumented-application/</guid>
      <description>Testing the application Navigate to the URL of the application.
 Navigate to TeamServer and observe the new application has been onboarded.
 Click through some screens, test some paths, show cause-and-effect from the application to TeamServer.
 Bonus:
When we encounter a vulnerability, show the code in the UI, and then navigate to the application to show the same.
 Bonus: Show a code fix. Rebuild the code. Deploy the new container.</description>
    </item>
    
    <item>
      <title>Module 2 - Instrumenting a Container</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/10-checking-out-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/10-checking-out-code/</guid>
      <description>Check out the source code We&amp;rsquo;re using the open-source example WebGoat from this location:
https://github.com/Contrast-Security-OSS/WebGoat_BBP_FORK
For the purposes of the workshop, we&amp;rsquo;re working from specific tags and branches to ensure a consistent experience. Specifically this branch:
https://github.com/Contrast-Security-OSS/WebGoat_BBP_FORK/tree/contrast-demo-webgoat-7.1
NOTE: This code may already be on their workshop workstation.
git clone https://github.com/Contrast-Security-OSS/WebGoat_BBP_FORK.git  Walk through the directory structure, if necessary  Build the code We will build the code at the command line for the benefit of developers already accustomed to the process.</description>
    </item>
    
    <item>
      <title>Scratchpad for ideas</title>
      <link>https://contrast-security-oss.github.io/workshop-hugo/module5/90-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://contrast-security-oss.github.io/workshop-hugo/module5/90-testing/</guid>
      <description>Fragments  Consider using  Fragments to reveal  information downstream 
 Alternative format - &amp;ldquo;Frag&amp;rdquo; The frag shortcode is more terse than fragment. It accepts a c attribute.
{{&amp;lt; frag c=&amp;quot;One&amp;quot; &amp;gt;}} {{&amp;lt; frag c=&amp;quot;Two&amp;quot; &amp;gt;}} {{&amp;lt; frag c=&amp;quot;Three&amp;quot; &amp;gt;}} One  Two  Three</description>
    </item>
    
  </channel>
</rss>
